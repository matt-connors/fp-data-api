generator kysely {
    provider = "prisma-kysely"
    output   = "../src"
    fileName = "types.ts"
}

generator client {
    provider = "prisma-client-js"
    output   = "../prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("WRANGLER_HYPERDRIVE_LOCAL_CONNECTION_STRING_fitness-db")
}

// Enums

enum PermissionAction {
    VIEW
    EDIT
    CREATE
    DELETE
    MANAGE
}

enum Resource {
    TEST
    TEST2
}

enum ProgramType {
    LIBRARY
    CUSTOM
}

// Auth-related models

model Role {
    id          Int          @id @default(autoincrement())
    roleName    String       @unique
    userRoles   UserRole[]
    permissions Permission[] // Many-to-many relation
}

model Permission {
    id          Int              @id @default(autoincrement())
    description String
    action      PermissionAction
    resource    Resource
    roles       Role[] // Many-to-many relation
    // endpoints   Endpoints[]

    @@unique([action, resource])
}

model UserRole {
    userId String
    roleId Int
    user   User   @relation(fields: [userId], references: [id])
    role   Role   @relation(fields: [roleId], references: [id])

    @@id([userId, roleId])
    @@index([roleId])
}

// Data-related models

model User {
    id            String       @id
    email         String       @unique
    firstName     String?
    lastName      String?
    phoneNumber   String?
    country       String?
    createdAt     DateTime     @default(now())
    userRoles     UserRole[]
    trainerId     Int?
    trainer       Trainer?     @relation(fields: [trainerId], references: [id])
    userProgram   UserProgram?
    userProgramId Int?
}

model Trainer {
    id                Int              @id @default(autoincrement())
    businessName      String
    authorizedUserIds String[]
    users             User[]
    trainerPrograms   TrainerProgram[]
}

model Exercise {
    id               Int               @id @default(autoincrement())
    name             String            @unique
    bodyPart         String
    aliases          String[]
    category         String
    programExercises ProgramExercise[]
    iconUrl          String
}

model Program {
    id               Int               @id @default(autoincrement())
    type             ProgramType?
    name             String?
    description      String?
    trainerPrograms  TrainerProgram[]
    createdAt        DateTime          @default(now())
    updatedAt        DateTime?         @updatedAt
    programExercises ProgramExercise[]
    userPrograms     UserProgram[]

    @@index([type]) // Index for filtering by type since we will have an indefinite number of programs
}

model ProgramExercise {
    program    Program  @relation(fields: [programId], references: [id])
    exercise   Exercise @relation(fields: [exerciseId], references: [id])
    programId  Int
    exerciseId Int
    order      Int? // Position of the exercise in the program
    sets       Int?
    reps       Int?
    duration   Int? // in seconds, if applicable
    notes      String?

    @@id([programId, exerciseId])
    @@index([programId]) // This index is crucial for our main query pattern
}

model TrainerProgram {
    id      Int     @id @default(autoincrement())
    trainer Trainer @relation(fields: [trainerId], references: [id])
    program Program @relation(fields: [programId], references: [id])

    trainerId Int
    programId Int
}

model UserProgram {
    id        Int       @id @default(autoincrement())
    user      User      @relation(fields: [userId], references: [id])
    program   Program   @relation(fields: [programId], references: [id])
    userId    String    @unique
    programId Int
    startDate DateTime
    endDate   DateTime?
}

// model Form {
//     assignedTo ....
// }
